//	=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
//
//	AI関係
//
//	Copyright(C)2016 Maruchu
//	http://maruchu.nobody.jp/
//
//	=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
using UnityEngine;
using System.Collections;




/// <summary>
/// AIの優先度情報
/// </summary>
public class AI_PrioTable {



/*
	AIの優先度の入れ方

	・8x8 の配列に 0以上の整数で優先度を入れてください

	・0に近いほうが優先度が低く(駒を置きにくく)、数字が大きい方が優先度が高く(駒を置きやすく)なります
		(※ 極端に大きい数字はコンピューターが使えないので、0 ～ 9999 あたりで入力してください)

	・AIは、現在 取得できる駒のリストの中で、一番優先度の高い場所に駒を置きます
		一番優先度の高い場所が複数ある場合は、その中からランダムに一つを選びます
*/



	/// SideA(白)の方
	public	static readonly	int[,]		prioTable_SideA			= new int[,] {
		 {		99,		0,			40,		30,			30,		40,			0,		99,			}
		,{		0,		0,			30,		20,			20,		30,			0,		0,			}

		,{		40,		30,			20,		10,			10,		20,			30,		40,			}
		,{		30,		20,			10,		1,			1,		10,			20,		30,			}

		,{		30,		20,			10,		1,			1,		10,			20,		30,			}
		,{		40,		30,			20,		10,			10,		20,			30,		40,			}

		,{		0,		0,			30,		20,			20,		30,			0,		0,			}
		,{		99,		0,			40,		30,			30,		40,			0,		99,			}
	};


	/// SideB(赤)の方
	public	static readonly	int[,]		prioTable_SideB			= new int[,] {
		 {		99,		0,			0,		0,			0,		0,			0,		99,			}
		,{		0,		0,			0,		0,			0,		0,			0,		0,			}

		,{		0,		0,			0,		0,			0,		0,			0,		0,			}
		,{		0,		0,			0,		1,			1,		0,			0,		0,			}

		,{		0,		0,			0,		1,			1,		0,			0,		0,			}
		,{		0,		0,			0,		0,			0,		0,			0,		0,			}

		,{		0,		0,			0,		0,			0,		0,			0,		0,			}
		,{		99,		0,			0,		0,			0,		0,			0,		99,			}
	};



}
